#ifdef	SSAO_QUALITY
#if		SSAO_QUALITY == 3
#define GTAO_SLICES 4	
#define GTAO_SAMPLE 4
#define GTAO_RADIUS 4.0
#elif	SSAO_QUALITY == 2
#define GTAO_SLICES 3	
#define GTAO_SAMPLE 3
#define GTAO_RADIUS 3.2
#elif	SSAO_QUALITY == 1
#define GTAO_SLICES 2	
#define GTAO_SAMPLE 2
#define GTAO_RADIUS 2.0
#endif

#ifdef GTAO_HALFRES
#define TC_MUL 2.0
#else
#define TC_MUL 1.0
#endif
#include "pbs.h"

//gbufferProjection = projeciton matrix
//cPosV = view position
//normalV = view normal
//cTexCoord = texture coordinates
//based on: https://www.activision.com/cdn/research/Practical_Real_Time_Strategies_for_Accurate_Indirect_Occlusion_NEW%20VERSION_COLOR.pdf
half3 unpack_position(half2 tc)
{
#ifndef USE_MSAA
	half depth = s_position.Sample( smp_nofilter, tc ).z;
#else
	half depth = s_position.Load( int2( tc * pos_decompression_params2.xy ),0 ).z;
#endif
	return gbuf_unpack_position((depth > 0.01 ? depth : 1000.0), tc * pos_decompression_params2.xy );
}

half GTAO_Offsets(half2 uv)
{
	int2 position = (int2)(uv * pos_decompression_params2.xy / TC_MUL);
	return 0.25 * (half)((position.y - position.x) & 3);
}

half GTAO_Noise(half2 position)
{
	return frac(52.9829189 * frac(dot(position, half2( 0.06711056, 0.00583715))));
}

#ifndef USE_MSAA
float2	calc_ssao( float3 cPosV, float3 normalV, float2 cTexCoord, float2 tcJ, float4 pos2d )
#else
float2	calc_ssao( float3 cPosV, float3 normalV, float2 cTexCoord, float2 tcJ, float4 pos2d, uint iSample )
#endif
{
	float fov = atan(1.0 / m_P._m11);
	float proj_scale = float(pos_decompression_params2.y) / (tan(fov * 0.5) * 2.0);
	float screen_radius = (GTAO_RADIUS * 0.5 * proj_scale) / cPosV.z;
	half3 viewV = -normalize(cPosV);

	half noiseOffset = GTAO_Offsets(cTexCoord);
	half noiseDirection = GTAO_Noise(cTexCoord * pos_decompression_params2.xy);

    float falloff_mul = 2 / pow(GTAO_RADIUS, 2);
    float2 screen_res_mul = 1.0h / GTAO_SAMPLE * pos_decompression_params2.zw;
    float pi_by_slices = 3.14 / GTAO_SLICES;

	float visibility = 0.0;

    for(int slice = 0; slice < GTAO_SLICES; slice++)
    {
        float phi = (slice + noiseDirection) * pi_by_slices;
        float2 omega = float2(cos(phi), sin(phi));
        float3 directionV = float3(omega.x, omega.y, 0.0);

        float3 orthoDirectionV = directionV - (dot(directionV, viewV) * viewV);
        float3 axisV = cross(directionV, viewV);
        float3 projNormalV = normalV - axisV * dot(normalV, axisV);
        float projNormalLenght = length(projNormalV);

        float sgnN = sign(dot(orthoDirectionV, projNormalV));
        float cosN = saturate(dot(projNormalV, viewV) / projNormalLenght);
        float n = sgnN * acos(cosN);
        float sinN2 = 2.0 * sin(n);

        for(int side = 0; side < 2; side ++)
        {
            float cHorizonCos = -1.0;

            for(int sample = 0; sample < GTAO_SAMPLE; sample++)
            {

                float2 s = max( screen_radius * (half(sample) + noiseOffset), 4 + half(sample)) * screen_res_mul; // fix for multiplying s by sample=0 from Unity code
                float2 sTexCoord = cTexCoord + (-1.0 + 2.0 * side) * s * float2(omega.x, -omega.y);
                float3 sPosV = unpack_position(sTexCoord);
                float3 sHorizonV = sPosV - cPosV;
                float falloff = saturate(dot(sHorizonV, sHorizonV) * falloff_mul);
                float H = dot(normalize(sHorizonV), viewV);
                cHorizonCos = (H > cHorizonCos) ? lerp(H, cHorizonCos, falloff) : cHorizonCos;

            }

            half h = n + clamp((-1.0 + 2.0 * side) * acos(cHorizonCos) - n, -3.14/2.0, 3.14/2.0);
            visibility += projNormalLenght * (cosN + h * sinN2 - cos(2.0 * h - n)) / 4.0;
        }
    }

    visibility /= GTAO_SLICES;
    return float2(visibility, cPosV.z);

}

#else // SSAO_QUALITY
#ifndef USE_MSAA
float2	calc_ssao( float3 cPosV, float3 normalV, float2 cTexCoord, float2 tcJ, float4 pos2d )
#else
float2	calc_ssao( float3 cPosV, float3 normalV, float2 cTexCoord, float2 tcJ, float4 pos2d, uint iSample )
#endif
{
	return 1.0;
}
#endif // SSAO_QUALITY