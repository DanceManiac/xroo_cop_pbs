#include "common.h"
#include "lmodel.h"
#include "shadow.h"

#ifdef USE_SUNFILTER
float4 	main		( float4 tc : TEXCOORD0, float4 tcJ : TEXCOORD1 ) : COLOR
{
	gbuffer_data	gbd		= gbuffer_load_data	( tc, tc * pos_decompression_params2.xy );
			float4	_P		= half4(gbd.P,		gbd.metalness	);		// pos.metalness
					_P.w 	= 1.f;
			float4 	PS		= mul		(m_shadow, 	_P)	;
			half 	s		= shadowtest_sun(PS,tcJ)*sunmask(_P)	;
			return 	s;
}
#else
float4 	main		( float4 tc : TEXCOORD0, float4 tcJ : TEXCOORD1 ) : COLOR
{
	gbuffer_data	gbd		= gbuffer_load_data	( tc.xy/tc.w, tc.xy/tc.w * pos_decompression_params2.xy );
			half4	_D		= half4(gbd.C_pac,	gbd.gloss_pac	);		// rgb.gloss
			float4	_P		= half4(gbd.P,		gbd.metalness	);		// pos.metalness
			half4	_N		= half4(gbd.N,		gbd.hemi		);		// norm.hemi


	// ----- light-model
	half 	m	= xmaterial	;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w		;
# endif
	half4	light	= plight_infinity ( _D, _P, _N, Ldynamic_dir );

	// ----- shadow
  	float4 	P4 	= float4	(_P.x,_P.y,_P.z,1.f);
	float4 	PS	= mul		(m_shadow, 	P4);
	half 	s 	= sunmask	(P4);
	#if defined (USE_SJITTER) || SUN_QUALITY==2
	  s 	*= shadow_high 	(PS);//shadowtest_sun 	(PS,float4(0,0,0,0));
	#else
	  s 	*= shadow		(PS);
	#endif

	return 		blend		(Ldynamic_color * Ldynamic_color * light * s * lsun_intensity, tc);
}
#endif